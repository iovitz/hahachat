generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Moment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text()
  published Boolean  @default(false)
  authorId  Int      @db.UnsignedInt()
  medias    String   @db.Text()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("moment")
}

model UserProfile {
  id        Int       @id @default(autoincrement()) @db.UnsignedInt()
  userid    String?   @unique @db.Char(10)
  desc      String?   @db.Char(100)
  gender    Boolean?
  birth     DateTime? @db.Date
  address   String?   @db.Char(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User? @relation(fields: [userid], references: [userid], onDelete: Cascade)

  @@map("user_profile")
}

model Friend {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  userid    String   @db.Char(10)
  friendid  String   @db.Char(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User @relation("friends", fields: [userid], references: [userid], onDelete: Cascade)
  friend User @relation("friend", fields: [friendid], references: [userid], onDelete: Cascade)

  @@map("friend")
}

model User {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  userid    String   @unique @db.Char(10)
  nickname  String   @db.Char(20)
  username  String   @unique @db.Char(20)
  password  String   @db.Char(70)
  avatar    String?  @unique @db.Char(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile    UserProfile?
  moments    Moment[]
  session    Session[]
  groupUser  GroupUser[]
  userNotice UserNotice[]
  request    ApplyRequest[]
  friends    Friend[]       @relation("friends")
  friend     Friend[]       @relation("friend")

  @@map("user")
}

model Group {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  groupid   String   @unique @db.Char(10)
  name      String   @db.Char(20)
  avatar    String?  @unique @db.Char(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users GroupUser[]

  @@map("group")
}

// 群组关系
model GroupUser {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  groupid   String   @db.Char(10)
  userid    String   @db.Char(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupid], references: [groupid], onDelete: Cascade)
  user  User  @relation(fields: [userid], references: [userid], onDelete: Cascade)

  @@map("group_user")
}

model ApplyRequest {
  id        Int              @id @default(autoincrement()) @db.UnsignedInt()
  type      ApplyRequestType
  userid    String           @db.Char(10)
  from      String           @db.Char(10)
  reason    String           @db.Char(50)
  agree     Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user User @relation(fields: [userid], references: [userid], onDelete: Cascade)

  @@map("apply_request")
}

// 用户通知消息
model UserNotice {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  userid    String   @db.Char(10)
  type      String   @db.Char(50)
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userid], references: [userid], onDelete: Cascade)

  @@map("user_notice")
}

model Session {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  session   String   @unique @db.Char(36)
  userid    String   @db.Char(10)
  expires   String   @db.Char(13)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userid], references: [userid], onDelete: Cascade)

  @@map("session")
}

model ServerLog {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  userid    String   @db.Char(10)
  logid     String?
  level     String   @db.Char(10)
  timestamp BigInt   @db.UnsignedBigInt()
  message   String?  @db.TinyText
  stack     String?  @db.Text
  context   String?  @db.Text
  createdAt DateTime @default(now())

  @@map("server_log")
}

model ClientLog {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt()
  uuid      String
  event     String   @db.Char(50)
  header    String   @db.Text
  params    String   @db.Text
  timestamp BigInt   @db.UnsignedBigInt()
  createdAt DateTime @default(now())

  @@map("client_log")
}

enum ApplyRequestType {
  Friend
  Group
}
